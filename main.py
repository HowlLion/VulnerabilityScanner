import requests
import re

def scan_xss(url):
    # Assume user input is provided here, e.g., "http://example.com?input=<script>alert('XSS')</script>"
    # Use the appropriate payload according to the vulnerable application
    xss_payload = "<script>alert('XSS')</script>"
    user_input = f"{url}?input={xss_payload}"
    response = requests.get(user_input)
    return xss_payload in response.text

def scan_sql_injection(url):
    # Assume user input is provided here, e.g., "http://example.com?id=1' OR '1'='1"
    # Use the appropriate payload according to the vulnerable application
    sql_injection_payload = "1' OR '1'='1"
    user_input = f"{url}?id={sql_injection_payload}"
    response = requests.get(user_input)
    return "query failed" in response.text

def scan_path_traversal(url):
    # Assume user input is provided here, e.g., "http://example.com/../sensitive_file"
    # Use the appropriate payload according to the vulnerable application
    path_traversal_payload = "/../"
    user_input = f"{url}{path_traversal_payload}sensitive_file"
    response = requests.get(user_input)
    return "sensitive file content" in response.text

def scan_command_injection(url):
    # Assume user input is provided here, e.g., "http://example.com?command=whoami"
    # Use the appropriate payload according to the vulnerable application
    command_injection_payload = "whoami"
    user_input = f"{url}?command={command_injection_payload}"
    response = requests.get(user_input)
    return "username" in response.text

def scan_insecure_server_config(url):
    # Use requests library to check if HTTP headers indicate an insecure server configuration
    response = requests.get(url, headers={"User-Agent": "Vulnerability Scanner"})
    headers = response.headers
    return "Strict-Transport-Security" not in headers and "Content-Security-Policy" not in headers

url = "http://example.com" # Replace with the target URL
print("Scanning for Cross-site scripting...")
print(scan_xss(url))
print("Scanning for SQL Injection...")
print(scan_sql_injection(url))
print("Scanning for Path Traversal...")
print(scan_path_traversal(url))
print("Scanning for Command Injection...")
print(scan_command_injection(url))
print("Scanning for Insecure Server Configuration...")
print(scan_insecure_server_config(url))
